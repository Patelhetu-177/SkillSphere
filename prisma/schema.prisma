generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  system
  teacher
  student
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model InterviewMate {
  id          String    @id @default(uuid())
  userId      String
  userName    String?
  src         String
  name        String
  description String
  instruction String
  seed        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
}

model Message {
  id              String         @id @default(uuid())
  role            Role
  content         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String
  interviewMateId String?
  interviewMate   InterviewMate? @relation(fields: [interviewMateId], references: [id], onDelete: Cascade)
  quizId          String?
  quiz            Quiz?          @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([interviewMateId])
  @@index([quizId])
}

model Quiz {
  id          String       @id @default(uuid())
  userId      String
  userName    String?
  subject     String
  grade       Int
  questions   Question[]
  submissions Submission[]
  messages    Message[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
}

model Question {
  id             String      @id @default(uuid())
  quizId         String
  quiz           Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text           String      @db.Text
  options        Json
  correctAnswer  String
  difficulty     Difficulty  @default(MEDIUM)
  embedding      String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([quizId])
}

model Submission {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     Json
  results     Json?    @db.JsonB
  score       Int
  suggestions Json?    @db.JsonB
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([quizId])
}
